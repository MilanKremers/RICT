//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Drawing.Design;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using VSShellInterop = global::Microsoft.VisualStudio.Shell.Interop;
using VSShell = global::Microsoft.VisualStudio.Shell;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace Company.RICT_parentlevel
{
	/// <summary>
	/// This class implements the VS package that integrates this DSL into Visual Studio.
	/// </summary>
	[VSShell::PackageRegistration(RegisterUsing = VSShell::RegistrationMethod.Assembly, UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]
	[VSShell::ProvideToolWindow(typeof(RICT_parentlevelExplorerToolWindow), MultiInstances = false, Style = VSShell::VsDockStyle.Tabbed, Orientation = VSShell::ToolWindowOrientation.Right, Window = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}")]
	[VSShell::ProvideToolWindowVisibility(typeof(RICT_parentlevelExplorerToolWindow), Constants.RICT_parentlevelEditorFactoryId)]
	[VSShell::ProvideStaticToolboxGroup("@RICT_parentlevelToolboxTab;Company.RICT_parentlevel.Dsl.dll", "Company.RICT_parentlevel.RICT_parentlevelToolboxTab")]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@SystemeticLayerToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.SystemeticLayerToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"SystemeticLayer", 
					"@SystemeticLayerToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 0)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@EnablingLayerToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.EnablingLayerToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"EnablingLayer", 
					"@EnablingLayerToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 1)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@ImmediateLayerToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.ImmediateLayerToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ImmediateLayer", 
					"@ImmediateLayerToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 2)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@SolutionToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.SolutionToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"Solution", 
					"@SolutionToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 3)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@TechnialConcernToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.TechnialConcernToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"TechnialConcern", 
					"@TechnialConcernToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 4)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@SocialConcernToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.SocialConcernToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"SocialConcern", 
					"@SocialConcernToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 5)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@EnvironmentalConcernToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.EnvironmentalConcernToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"EnvironmentalConcern", 
					"@EnvironmentalConcernToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 6)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@EconomicConcernToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.EconomicConcernToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"EconomicConcern", 
					"@EconomicConcernToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 7)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@PositiveRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.PositiveRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"PositiveRelation", 
					"@PositiveRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 8)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@NegativeRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.NegativeRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"NegativeRelation", 
					"@NegativeRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 9)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@UndecidedRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.UndecidedRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"UndecidedRelation", 
					"@UndecidedRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 10)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@PositiveSolutionRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.PositiveSolutionRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"PositiveSolutionRelation", 
					"@PositiveSolutionRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 11)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@NegativeSolutionRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.NegativeSolutionRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"NegativeSolutionRelation", 
					"@NegativeSolutionRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 12)]
	[VSShell::ProvideStaticToolboxItem("Company.RICT_parentlevel.RICT_parentlevelToolboxTab",
					"@UndecidedSolutionRelationToolboxItem;Company.RICT_parentlevel.Dsl.dll", 
					"Company.RICT_parentlevel.UndecidedSolutionRelationToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"UndecidedSolutionRelation", 
					"@UndecidedSolutionRelationToolboxBitmap;Company.RICT_parentlevel.Dsl.dll", 
					0xff00ff,
					Index = 13)]
	[VSShell::ProvideEditorFactory(typeof(RICT_parentlevelEditorFactory), 103, TrustLevel = VSShellInterop::__VSEDITORTRUSTLEVEL.ETL_AlwaysTrusted)]
	[VSShell::ProvideEditorExtension(typeof(RICT_parentlevelEditorFactory), "." + Constants.DesignerFileExtension, 50)]
	[VSShell::ProvideEditorLogicalView(typeof(RICT_parentlevelEditorFactory), "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}")] // Designer logical view GUID i.e. VSConstants.LOGVIEWID_Designer
	[DslShell::ProvideRelatedFile("." + Constants.DesignerFileExtension, Constants.DefaultDiagramExtension,
		ProjectSystem = DslShell::ProvideRelatedFileAttribute.CSharpProjectGuid,
		FileOptions = DslShell::RelatedFileType.FileName)]
	[DslShell::ProvideRelatedFile("." + Constants.DesignerFileExtension, Constants.DefaultDiagramExtension,
		ProjectSystem = DslShell::ProvideRelatedFileAttribute.VisualBasicProjectGuid,
		FileOptions = DslShell::RelatedFileType.FileName)]
	[DslShell::RegisterAsDslToolsEditor]
	[global::System.Runtime.InteropServices.ComVisible(true)]
	[DslShell::ProvideBindingPath]
	[DslShell::ProvideXmlEditorChooserBlockSxSWithXmlEditor(@"RICT_parentlevel", typeof(RICT_parentlevelEditorFactory))]

	internal abstract partial class RICT_parentlevelPackageBase : DslShell::AsyncModelingPackage
	{
		protected global::Company.RICT_parentlevel.RICT_parentlevelToolboxHelper toolboxHelper;	
		
		/// <summary>
		/// Initialization method called by the package base class when this package is loaded.
		/// </summary>
		protected async override System.Threading.Tasks.Task InitializeAsync(CancellationToken cancellationToken, IProgress<VSShell.ServiceProgressData> progress)
		{
			await base.InitializeAsync(cancellationToken, progress);

			// Register the editor factory used to create the DSL editor.
			this.RegisterEditorFactory(new RICT_parentlevelEditorFactory(this));
			
			// Initialize the toolbox helper
			toolboxHelper = new global::Company.RICT_parentlevel.RICT_parentlevelToolboxHelper(this);

			// Create the command set that handles menu commands provided by this package.
			RICT_parentlevelCommandSet commandSet = new RICT_parentlevelCommandSet(this);
			await commandSet.InitializeAsync(cancellationToken);
			
			// Create the command set that handles cut/copy/paste commands provided by this package.
			RICT_parentlevelClipboardCommandSet clipboardCommandSet = new RICT_parentlevelClipboardCommandSet(this);
			await clipboardCommandSet.InitializeAsync(cancellationToken);
			
			// Register the model explorer tool window for this DSL.
			this.AddToolWindow(typeof(RICT_parentlevelExplorerToolWindow));

			if (cancellationToken.IsCancellationRequested)
			{
				return;
			}

			await JoinableTaskFactory.SwitchToMainThreadAsync();

			// Initialize Extension Registars
			// this is a partial method call
			this.InitializeExtensions();

			// Add dynamic toolbox items
			await this.SetupDynamicToolboxAsync(cancellationToken);
		}

		/// <summary>
		/// Partial method to initialize ExtensionRegistrars (if any) in the DslPackage
		/// </summary>
		partial void InitializeExtensions();
		
		/// <summary>
		/// Returns any dynamic tool items for the designer
		/// </summary>
		/// <remarks>The default implementation is to return the list of items from the generated toolbox helper.</remarks>
		protected override global::System.Collections.Generic.IList<DslDesign::ModelingToolboxItem> CreateToolboxItems()
		{
			try
			{
				Debug.Assert(toolboxHelper != null, "Toolbox helper is not initialized");
				return toolboxHelper.CreateToolboxItems();
			}
			catch (global::System.Exception e)
			{
				global::System.Diagnostics.Debug.Fail("Exception thrown during toolbox item creation.  This may result in Package Load Failure:\r\n\r\n" + e);
				throw;
			}
		}
		
		
		/// <summary>
		/// Given a toolbox item "unique ID" and a data format identifier, returns the content of
		/// the data format. 
		/// </summary>
		/// <param name="itemId">The unique ToolboxItem to retrieve data for</param>
		/// <param name="format">The desired format of the resulting data</param>
		protected override object GetToolboxItemData(string itemId, DataFormats.Format format)
		{
			Debug.Assert(toolboxHelper != null, "Toolbox helper is not initialized");
		
			// Retrieve the specified ToolboxItem from the DSL
			return toolboxHelper.GetToolboxItemData(itemId, format);
		}

		public override VSShellInterop::IVsAsyncToolWindowFactory GetAsyncToolWindowFactory(Guid toolWindowType)
		{
			if (toolWindowType == typeof(RICT_parentlevelExplorerToolWindow).GUID)
			{
				return this;
			}

			return base.GetAsyncToolWindowFactory(toolWindowType);
		}
	}
}

//
// Package attributes which may need to change are placed on the partial class below, rather than in the main include file.
//
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	[VSShell::ProvideMenuResource("1000.ctmenu", 1)]
	[VSShell::ProvideToolboxItems(1)]
	[global::Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessor(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDirectiveProcessor), global::Company.RICT_parentlevel.RICT_parentlevelDirectiveProcessor.RICT_parentlevelDirectiveProcessorName, "A directive processor that provides access to RICT_parentlevel files")]
	[global::System.Runtime.InteropServices.Guid(Constants.RICT_parentlevelPackageId)]
	internal sealed partial class RICT_parentlevelPackage : RICT_parentlevelPackageBase
	{
	}
}