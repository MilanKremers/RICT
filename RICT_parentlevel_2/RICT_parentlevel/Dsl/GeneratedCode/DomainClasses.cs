//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass SoSa
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.SoSa.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.SoSa.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7f24ec91-15f8-4834-8924-57ffd8045821")]
	public partial class SoSa : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSa domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7f24ec91, 0x15f8, 0x4834, 0x89, 0x24, 0x57, 0xff, 0xd8, 0x04, 0x58, 0x21);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.RICT_parentlevel.SoSaHasElements.SoSaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT_parentlevel.ImpactLevels.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.RICT_parentlevel.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.RICT_parentlevel.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Create link for path SoSaHasElements.Elements
				this.Elements.Add(sourceImpactLevels1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.RICT_parentlevel.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.RICT_parentlevel.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Delete link for path SoSaHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.RICT_parentlevel.SoSaHasElements.GetLinks((global::Company.RICT_parentlevel.SoSa)this, sourceImpactLevels1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT_parentlevel.SoSaHasElements.SoSaDomainRoleId, global::Company.RICT_parentlevel.SoSaHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass ImpactLevels
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevels.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevels.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("937133d3-7ccd-432a-b25e-87f0bf58066d")]
	public partial class ImpactLevels : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactLevels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x937133d3, 0x7ccd, 0x432a, 0xb2, 0x5e, 0x87, 0xf0, 0xbf, 0x58, 0x06, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6a6bc8aa, 0x6802, 0x4b60, 0xb8, 0xe4, 0x81, 0xf1, 0x60, 0xe9, 0xa1, 0x53);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.RICT_parentlevel.ImpactLevels.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevels/Name.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevels/Name.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6a6bc8aa-6802-4b60-b8e4-81f160e9a153")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactLevels.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactLevels, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactLevels.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactLevels.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactLevels element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactLevels element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSa opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSa.
		/// </summary>
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT_parentlevel.SoSaHasElements.ElementDomainRoleId) as SoSa;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT_parentlevel.SoSaHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.RICT_parentlevel.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.RICT_parentlevel.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region Concerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concerns.
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevels
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
			}
		}
		#endregion
		#region Solution opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Solution.
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevels
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution> Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(global::Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevelsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT_parentlevel.Concerns.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.RICT_parentlevel.Solution.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.RICT_parentlevel.Concerns sourceConcerns1 = sourceElement as global::Company.RICT_parentlevel.Concerns;
			if (sourceConcerns1 != null)
			{
				// Create link for path ImpactLevelsHasConcerns.Concerns
				this.Concerns.Add(sourceConcerns1);

				return;
			}
				
			global::Company.RICT_parentlevel.Solution sourceSolution2 = sourceElement as global::Company.RICT_parentlevel.Solution;
			if (sourceSolution2 != null)
			{
				// Create link for path ImpactLevelsHasSolution.Solution
				this.Solution.Add(sourceSolution2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.RICT_parentlevel.Concerns sourceConcerns1 = sourceElement as global::Company.RICT_parentlevel.Concerns;
			if (sourceConcerns1 != null)
			{
				// Delete link for path ImpactLevelsHasConcerns.Concerns
				
				foreach (DslModeling::ElementLink link in global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.GetLinks((global::Company.RICT_parentlevel.ImpactLevels)this, sourceConcerns1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ConcernsDomainRoleId);
				}

				return;
			}
				
			global::Company.RICT_parentlevel.Solution sourceSolution2 = sourceElement as global::Company.RICT_parentlevel.Solution;
			if (sourceSolution2 != null)
			{
				// Delete link for path ImpactLevelsHasSolution.Solution
				
				foreach (DslModeling::ElementLink link in global::Company.RICT_parentlevel.ImpactLevelsHasSolution.GetLinks((global::Company.RICT_parentlevel.ImpactLevels)this, sourceSolution2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevelsDomainRoleId, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.SolutionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass Systemetic
	/// Description for Company.RICT_parentlevel.Systemetic
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Systemetic.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.Systemetic.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ea2d44a4-9021-41ec-9738-ffb95ed24ad2")]
	public partial class Systemetic : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Systemetic domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xea2d44a4, 0x9021, 0x41ec, 0x97, 0x38, 0xff, 0xb9, 0x5e, 0xd2, 0x4a, 0xd2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Systemetic(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Systemetic(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass Enabling
	/// Description for Company.RICT_parentlevel.Enabling
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Enabling.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.Enabling.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9abce2dd-1d50-4310-88cd-e21bc51c1627")]
	public partial class Enabling : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Enabling domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9abce2dd, 0x1d50, 0x4310, 0x88, 0xcd, 0xe2, 0x1b, 0xc5, 0x1c, 0x16, 0x27);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass Concerns
	/// Description for Company.RICT_parentlevel.Concerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Concerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.Concerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2336c81e-5c3f-46ea-b3a4-477d230ed1fc")]
	public partial class Concerns : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2336c81e, 0x5c3f, 0x46ea, 0xb3, 0xa4, 0x47, 0x7d, 0x23, 0x0e, 0xd1, 0xfc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concerns(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concerns(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xaa5a31ae, 0xba02, 0x4582, 0xb7, 0x72, 0x33, 0xda, 0xb8, 0x8d, 0xd6, 0x1e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for Company.RICT_parentlevel.Concerns.Description
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Concerns/Description.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.Concerns/Description.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aa5a31ae-ba02-4582-b772-33dab88dd61e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Concerns.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Concerns, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Concerns.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Concerns.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Concerns element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Concerns element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImpactLevels opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevels.
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasConcerns.Concerns
		/// </summary>
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ConcernsDomainRoleId) as ImpactLevels;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ConcernsDomainRoleId, value);
			}
		}
		#endregion
		#region PositiveTargetConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PositiveTargetConcerns.
		/// Description for Company.RICT_parentlevel.PositiveRelation.SourceConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> PositiveTargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.PositiveRelation.SourceConcernsDomainRoleId);
			}
		}
		#endregion
		#region PositiveSourceConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PositiveSourceConcerns.
		/// Description for Company.RICT_parentlevel.PositiveRelation.TargetConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> PositiveSourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.PositiveRelation.TargetConcernsDomainRoleId);
			}
		}
		#endregion
		#region NegativeTargetConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NegativeTargetConcerns.
		/// Description for Company.RICT_parentlevel.NegativeRelation.SourceConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> NegativeTargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.NegativeRelation.SourceConcernsDomainRoleId);
			}
		}
		#endregion
		#region NegativeSourceConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NegativeSourceConcerns.
		/// Description for Company.RICT_parentlevel.NegativeRelation.TargetConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> NegativeSourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.NegativeRelation.TargetConcernsDomainRoleId);
			}
		}
		#endregion
		#region TargetConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerns.
		/// Description for Company.RICT_parentlevel.UndecidedRelation.SourceConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> TargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.UndecidedRelation.SourceConcernsDomainRoleId);
			}
		}
		#endregion
		#region SourceConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcerns.
		/// Description for Company.RICT_parentlevel.UndecidedRelation.TargetConcerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> SourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.UndecidedRelation.TargetConcernsDomainRoleId);
			}
		}
		#endregion
		#region PositiveSolution opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PositiveSolution.
		/// Description for Company.RICT_parentlevel.PositiveSolutionRelation.Concerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution> PositiveSolution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(global::Company.RICT_parentlevel.PositiveSolutionRelation.ConcernsDomainRoleId);
			}
		}
		#endregion
		#region NegativeSolution opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NegativeSolution.
		/// Description for Company.RICT_parentlevel.NegativeSolutionRelation.Concerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution> NegativeSolution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(global::Company.RICT_parentlevel.NegativeSolutionRelation.ConcernsDomainRoleId);
			}
		}
		#endregion
		#region UndecidedSolution opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UndecidedSolution.
		/// Description for Company.RICT_parentlevel.UndecidedSolutionRelation.Concerns
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution> UndecidedSolution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(global::Company.RICT_parentlevel.UndecidedSolutionRelation.ConcernsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass TechnicalConcern
	/// Description for Company.RICT_parentlevel.TechnicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.TechnicalConcern.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.TechnicalConcern.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14fee0bf-bbb3-4326-b769-1df8485f951a")]
	public partial class TechnicalConcern : Concerns
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TechnicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14fee0bf, 0xbbb3, 0x4326, 0xb7, 0x69, 0x1d, 0xf8, 0x48, 0x5f, 0x95, 0x1a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass Immediate
	/// Description for Company.RICT_parentlevel.Immediate
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Immediate.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.Immediate.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e862a709-27d4-495d-8725-c78fd047a8eb")]
	public partial class Immediate : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Immediate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe862a709, 0x27d4, 0x495d, 0x87, 0x25, 0xc7, 0x8f, 0xd0, 0x47, 0xa8, 0xeb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass SocialConcern
	/// Description for Company.RICT_parentlevel.SocialConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.SocialConcern.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.SocialConcern.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d9107247-a455-4dfe-8667-790aa5af2a00")]
	public partial class SocialConcern : Concerns
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocialConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9107247, 0xa455, 0x4dfe, 0x86, 0x67, 0x79, 0x0a, 0xa5, 0xaf, 0x2a, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass EnvironmentalConcern
	/// Description for Company.RICT_parentlevel.EnvironmentalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.EnvironmentalConcern.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.EnvironmentalConcern.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e1628c7b-a588-42f5-b54b-3e00b77162ff")]
	public partial class EnvironmentalConcern : Concerns
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnvironmentalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1628c7b, 0xa588, 0x42f5, 0xb5, 0x4b, 0x3e, 0x00, 0xb7, 0x71, 0x62, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass EconomicConcern
	/// Description for Company.RICT_parentlevel.EconomicConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.EconomicConcern.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.EconomicConcern.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ffd6b49e-0007-434f-9102-8498ccf1a0e4")]
	public partial class EconomicConcern : Concerns
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EconomicConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xffd6b49e, 0x0007, 0x434f, 0x91, 0x02, 0x84, 0x98, 0xcc, 0xf1, 0xa0, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainClass Solution
	/// Description for Company.RICT_parentlevel.Solution
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Solution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.Solution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f8969590-3561-4028-8888-605965ef711a")]
	public partial class Solution : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Solution domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf8969590, 0x3561, 0x4028, 0x88, 0x88, 0x60, 0x59, 0x65, 0xef, 0x71, 0x1a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3eb2f135, 0x332d, 0x4130, 0xae, 0xe3, 0xb5, 0xff, 0x53, 0x83, 0x0d, 0x43);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.RICT_parentlevel.Solution.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.Solution/Name.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.Solution/Name.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3eb2f135-332d-4130-aee3-b5ff53830d43")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Solution.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Solution, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Solution.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Solution.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Solution element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Solution element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImpactLevels opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevels.
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasSolution.Solution
		/// </summary>
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.SolutionDomainRoleId) as ImpactLevels;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.SolutionDomainRoleId, value);
			}
		}
		#endregion
		#region PositiveConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PositiveConcerns.
		/// Description for Company.RICT_parentlevel.PositiveSolutionRelation.Solution
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> PositiveConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.PositiveSolutionRelation.SolutionDomainRoleId);
			}
		}
		#endregion
		#region NegativeConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NegativeConcerns.
		/// Description for Company.RICT_parentlevel.NegativeSolutionRelation.Solution
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> NegativeConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.NegativeSolutionRelation.SolutionDomainRoleId);
			}
		}
		#endregion
		#region UndecidedConcerns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UndecidedConcerns.
		/// Description for Company.RICT_parentlevel.UndecidedSolutionRelation.Solution
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concerns> UndecidedConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(global::Company.RICT_parentlevel.UndecidedSolutionRelation.SolutionDomainRoleId);
			}
		}
		#endregion
	}
}
