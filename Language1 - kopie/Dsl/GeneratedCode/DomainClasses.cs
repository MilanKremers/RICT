//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Language1
{
	/// <summary>
	/// DomainClass SoSa
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.SoSa.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.SoSa.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d9930890-9ce2-4f83-bb00-2b6f66ee477c")]
	public partial class SoSa : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSa domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9930890, 0x9ce2, 0x4f83, 0xbb, 0x00, 0x2b, 0x6f, 0x66, 0xee, 0x47, 0x7c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		/// <summary>
		/// Gets or sets Elements.
		/// </summary>
		public virtual StructuralLayer Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.SoSaHasElements.SoSaDomainRoleId) as StructuralLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.SoSaHasElements.SoSaDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language1.StructuralLayer.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: SoSaHasElements.Elements
					if (this.Elements != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language1.StructuralLayer sourceStructuralLayer1 = sourceElement as global::Company.Language1.StructuralLayer;
			if (sourceStructuralLayer1 != null)
			{
				// Create link for path SoSaHasElements.Elements
				this.Elements = sourceStructuralLayer1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language1.StructuralLayer sourceStructuralLayer1 = sourceElement as global::Company.Language1.StructuralLayer;
			if (sourceStructuralLayer1 != null)
			{
				// Delete link for path SoSaHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.Language1.SoSaHasElements.GetLinks((global::Company.Language1.SoSa)this, sourceStructuralLayer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language1.SoSaHasElements.SoSaDomainRoleId, global::Company.Language1.SoSaHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainClass StructuralLayer
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.StructuralLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.StructuralLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4a782471-88f9-4efb-9120-fba6ea7f0942")]
	public partial class StructuralLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StructuralLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a782471, 0x88f9, 0x4efb, 0x91, 0x20, 0xfb, 0xa6, 0xea, 0x7f, 0x09, 0x42);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StructuralLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StructuralLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0f201dfb, 0x4838, 0x4523, 0x80, 0xa0, 0xaa, 0x96, 0x4c, 0xfb, 0x8a, 0x34);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Language1.StructuralLayer.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.StructuralLayer/Name.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.StructuralLayer/Name.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("0f201dfb-4838-4523-80a0-aa964cfb8a34")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StructuralLayer.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<StructuralLayer, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StructuralLayer.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StructuralLayer.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StructuralLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StructuralLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSa opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSa.
		/// </summary>
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.SoSaHasElements.ElementDomainRoleId) as SoSa;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.SoSaHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.Language1.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StructuralLayer> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StructuralLayer>, StructuralLayer>(global::Company.Language1.StructuralLayerReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.Language1.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StructuralLayer> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StructuralLayer>, StructuralLayer>(global::Company.Language1.StructuralLayerReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region EnablingLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets EnablingLayer.
		/// Description for
		/// Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayer
		/// </summary>
		public virtual EnablingLayer EnablingLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId) as EnablingLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language1.EnablingLayer.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: StructuralLayerHasEnablingLayer.EnablingLayer
					if (this.EnablingLayer != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language1.EnablingLayer sourceEnablingLayer1 = sourceElement as global::Company.Language1.EnablingLayer;
			if (sourceEnablingLayer1 != null)
			{
				// Create link for path StructuralLayerHasEnablingLayer.EnablingLayer
				this.EnablingLayer = sourceEnablingLayer1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language1.EnablingLayer sourceEnablingLayer1 = sourceElement as global::Company.Language1.EnablingLayer;
			if (sourceEnablingLayer1 != null)
			{
				// Delete link for path StructuralLayerHasEnablingLayer.EnablingLayer
				
				foreach (DslModeling::ElementLink link in global::Company.Language1.StructuralLayerHasEnablingLayer.GetLinks((global::Company.Language1.StructuralLayer)this, sourceEnablingLayer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId, global::Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainClass EnablingLayer
	/// Description for Company.Language1.EnablingLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.EnablingLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.EnablingLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6881cbd2-67f9-492c-a0dd-7ddf8ba7a099")]
	public partial class EnablingLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnablingLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6881cbd2, 0x67f9, 0x492c, 0xa0, 0xdd, 0x7d, 0xdf, 0x8b, 0xa7, 0xa0, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region StructuralLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets StructuralLayer.
		/// Description for Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayer
		/// </summary>
		public virtual StructuralLayer StructuralLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayerDomainRoleId) as StructuralLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayerDomainRoleId, value);
			}
		}
		#endregion
		#region LyfeCycleLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets LyfeCycleLayer.
		/// Description for Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayer
		/// </summary>
		public virtual LyfeCycleLayer LyfeCycleLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId) as LyfeCycleLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language1.LyfeCycleLayer.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: EnablingLayerHasLyfeCycleLayer.LyfeCycleLayer
					if (this.LyfeCycleLayer != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language1.LyfeCycleLayer sourceLyfeCycleLayer1 = sourceElement as global::Company.Language1.LyfeCycleLayer;
			if (sourceLyfeCycleLayer1 != null)
			{
				// Create link for path EnablingLayerHasLyfeCycleLayer.LyfeCycleLayer
				this.LyfeCycleLayer = sourceLyfeCycleLayer1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language1.LyfeCycleLayer sourceLyfeCycleLayer1 = sourceElement as global::Company.Language1.LyfeCycleLayer;
			if (sourceLyfeCycleLayer1 != null)
			{
				// Delete link for path EnablingLayerHasLyfeCycleLayer.LyfeCycleLayer
				
				foreach (DslModeling::ElementLink link in global::Company.Language1.EnablingLayerHasLyfeCycleLayer.GetLinks((global::Company.Language1.EnablingLayer)this, sourceLyfeCycleLayer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainClass LyfeCycleLayer
	/// Description for Company.Language1.LyfeCycleLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.LyfeCycleLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.LyfeCycleLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5cd33a70-2c48-4227-bf19-e83af8768c04")]
	public partial class LyfeCycleLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LyfeCycleLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5cd33a70, 0x2c48, 0x4227, 0xbf, 0x19, 0xe8, 0x3a, 0xf8, 0x76, 0x8c, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LyfeCycleLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LyfeCycleLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EnablingLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets EnablingLayer.
		/// Description for Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayer
		/// </summary>
		public virtual EnablingLayer EnablingLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayerDomainRoleId) as EnablingLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayerDomainRoleId, value);
			}
		}
		#endregion
		#region SystemLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets SystemLayer.
		/// Description for Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayer
		/// </summary>
		public virtual SystemLayer SystemLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId) as SystemLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language1.SystemLayer.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: LyfeCycleLayerHasSystemLayer.SystemLayer
					if (this.SystemLayer != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language1.SystemLayer sourceSystemLayer1 = sourceElement as global::Company.Language1.SystemLayer;
			if (sourceSystemLayer1 != null)
			{
				// Create link for path LyfeCycleLayerHasSystemLayer.SystemLayer
				this.SystemLayer = sourceSystemLayer1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language1.SystemLayer sourceSystemLayer1 = sourceElement as global::Company.Language1.SystemLayer;
			if (sourceSystemLayer1 != null)
			{
				// Delete link for path LyfeCycleLayerHasSystemLayer.SystemLayer
				
				foreach (DslModeling::ElementLink link in global::Company.Language1.LyfeCycleLayerHasSystemLayer.GetLinks((global::Company.Language1.LyfeCycleLayer)this, sourceSystemLayer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId, global::Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainClass SystemLayer
	/// Description for Company.Language1.SystemLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.SystemLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.SystemLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ffc062df-e60c-476c-aee8-8e4dfb1ac586")]
	public partial class SystemLayer : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SystemLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xffc062df, 0xe60c, 0x476c, 0xae, 0xe8, 0x8e, 0x4d, 0xfb, 0x1a, 0xc5, 0x86);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystemLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystemLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LyfeCycleLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets LyfeCycleLayer.
		/// Description for Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayer
		/// </summary>
		public virtual LyfeCycleLayer LyfeCycleLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayerDomainRoleId) as LyfeCycleLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayerDomainRoleId, value);
			}
		}
		#endregion
	}
}
