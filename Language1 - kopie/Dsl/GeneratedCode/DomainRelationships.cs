//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Language1
{
	/// <summary>
	/// DomainRelationship SoSaHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.SoSaHasElements.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.SoSaHasElements.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4d1a21f1-29d3-4971-bb93-012df0c639cd")]
	public partial class SoSaHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSaHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d1a21f1, 0x29d3, 0x4971, 0xbb, 0x93, 0x01, 0x2d, 0xf0, 0xc6, 0x39, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSaHasElements link in the same Partition as the given SoSa
		/// </summary>
		/// <param name="source">SoSa to use as the source of the relationship.</param>
		/// <param name="target">StructuralLayer to use as the target of the relationship.</param>
		public SoSaHasElements(SoSa source, StructuralLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSaHasElements.SoSaDomainRoleId, source), new DslModeling::RoleAssignment(SoSaHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSa domain role code
		
		/// <summary>
		/// SoSa domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSaDomainRoleId = new global::System.Guid(0x952cb20d, 0x3fd4, 0x49b3, 0x9b, 0x6f, 0x9c, 0xeb, 0xdb, 0xdd, 0xd8, 0x4d);
		
		/// <summary>
		/// DomainRole SoSa
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.SoSaHasElements/SoSa.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.SoSaHasElements/SoSa.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.Language1.SoSaHasElements/SoSa.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("952cb20d-3fd4-49b3-9b6f-9cebdbddd84d")]
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSa)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSa of a StructuralLayer
		/// <summary>
		/// Gets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSa GetSoSa(StructuralLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SoSa;
		}
		
		/// <summary>
		/// Sets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSa(StructuralLayer element, SoSa newSoSa)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSoSa);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x5cac0eb3, 0xfdac, 0x4e81, 0xa2, 0xe8, 0xb4, 0x61, 0x91, 0xa5, 0x51, 0x7b);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.SoSaHasElements/Element.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.SoSaHasElements/Element.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSa", PropertyDisplayNameKey="Company.Language1.SoSaHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5cac0eb3-fdac-4e81-a2e8-b46191a5517b")]
		public virtual StructuralLayer Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StructuralLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SoSa
		/// <summary>
		/// Gets Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static StructuralLayer GetElements(SoSa element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SoSaDomainRoleId) as StructuralLayer;
		}
		
		/// <summary>
		/// Sets Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElements(SoSa element, StructuralLayer newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SoSaDomainRoleId, newElement);
		}
		#endregion
		#region SoSa link accessor
		/// <summary>
		/// Get the SoSaHasElements link to a SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.SoSaHasElements GetLinkToElements (global::Company.Language1.SoSa soSaInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.SoSaHasElements>(soSaInstance, global::Company.Language1.SoSaHasElements.SoSaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SoSa not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SoSaHasElements link to a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.SoSaHasElements GetLinkToSoSa (global::Company.Language1.StructuralLayer elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.SoSaHasElements>(elementInstance, global::Company.Language1.SoSaHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSaHasElements instance accessors
		
		/// <summary>
		/// Get any SoSaHasElements links between a given SoSa and a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.SoSaHasElements> GetLinks( global::Company.Language1.SoSa source, global::Company.Language1.StructuralLayer target )
		{
			global::System.Collections.Generic.List<global::Company.Language1.SoSaHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.Language1.SoSaHasElements>();
			global::System.Collections.Generic.IList<global::Company.Language1.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.SoSaHasElements>(source, global::Company.Language1.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.Language1.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSaHasElements link between a given SoSaand a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.SoSaHasElements GetLink( global::Company.Language1.SoSa source, global::Company.Language1.StructuralLayer target )
		{
			global::System.Collections.Generic.IList<global::Company.Language1.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.SoSaHasElements>(source, global::Company.Language1.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.Language1.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainRelationship StructuralLayerReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerReferencesTargets.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.StructuralLayerReferencesTargets.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b7c9a39a-9859-4254-a105-d42db2802832")]
	public partial class StructuralLayerReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StructuralLayerReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7c9a39a, 0x9859, 0x4254, 0xa1, 0x05, 0xd4, 0x2d, 0xb2, 0x80, 0x28, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StructuralLayerReferencesTargets link in the same Partition as the given StructuralLayer
		/// </summary>
		/// <param name="source">StructuralLayer to use as the source of the relationship.</param>
		/// <param name="target">StructuralLayer to use as the target of the relationship.</param>
		public StructuralLayerReferencesTargets(StructuralLayer source, StructuralLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StructuralLayerReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(StructuralLayerReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructuralLayerReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructuralLayerReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructuralLayerReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructuralLayerReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xe4fd8012, 0x7a0d, 0x453e, 0x83, 0x2d, 0xa1, 0x40, 0x59, 0xde, 0x9e, 0x12);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.Language1.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerReferencesTargets/Source.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.StructuralLayerReferencesTargets/Source.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.Language1.StructuralLayerReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e4fd8012-7a0d-453e-832d-a14059de9e12")]
		public virtual StructuralLayer Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StructuralLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a StructuralLayer
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StructuralLayer> GetSources(StructuralLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StructuralLayer>, StructuralLayer>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xe5f364a2, 0x1d99, 0x4dea, 0x92, 0x0d, 0xa7, 0x2e, 0xb5, 0x9c, 0xf1, 0x61);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.Language1.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerReferencesTargets/Target.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.StructuralLayerReferencesTargets/Target.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.Language1.StructuralLayerReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e5f364a2-1d99-4dea-920d-a72eb59cf161")]
		public virtual StructuralLayer Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StructuralLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a StructuralLayer
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StructuralLayer> GetTargets(StructuralLayer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StructuralLayer>, StructuralLayer>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of StructuralLayerReferencesTargets links to a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.StructuralLayerReferencesTargets> GetLinksToTargets ( global::Company.Language1.StructuralLayer sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerReferencesTargets>(sourceInstance, global::Company.Language1.StructuralLayerReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of StructuralLayerReferencesTargets links to a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.StructuralLayerReferencesTargets> GetLinksToSources ( global::Company.Language1.StructuralLayer targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerReferencesTargets>(targetInstance, global::Company.Language1.StructuralLayerReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region StructuralLayerReferencesTargets instance accessors
		
		/// <summary>
		/// Get any StructuralLayerReferencesTargets links between a given StructuralLayer and a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.StructuralLayerReferencesTargets> GetLinks( global::Company.Language1.StructuralLayer source, global::Company.Language1.StructuralLayer target )
		{
			global::System.Collections.Generic.List<global::Company.Language1.StructuralLayerReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.Language1.StructuralLayerReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerReferencesTargets>(source, global::Company.Language1.StructuralLayerReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Language1.StructuralLayerReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StructuralLayerReferencesTargets link between a given StructuralLayerand a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.StructuralLayerReferencesTargets GetLink( global::Company.Language1.StructuralLayer source, global::Company.Language1.StructuralLayer target )
		{
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerReferencesTargets>(source, global::Company.Language1.StructuralLayerReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Language1.StructuralLayerReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainRelationship StructuralLayerHasEnablingLayer
	/// Description for Company.Language1.StructuralLayerHasEnablingLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerHasEnablingLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.StructuralLayerHasEnablingLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a0080582-3d81-43b7-8302-74a08f8bbfa8")]
	public partial class StructuralLayerHasEnablingLayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StructuralLayerHasEnablingLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa0080582, 0x3d81, 0x43b7, 0x83, 0x02, 0x74, 0xa0, 0x8f, 0x8b, 0xbf, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StructuralLayerHasEnablingLayer link in the same Partition as the given StructuralLayer
		/// </summary>
		/// <param name="source">StructuralLayer to use as the source of the relationship.</param>
		/// <param name="target">EnablingLayer to use as the target of the relationship.</param>
		public StructuralLayerHasEnablingLayer(StructuralLayer source, EnablingLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId, source), new DslModeling::RoleAssignment(StructuralLayerHasEnablingLayer.EnablingLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructuralLayerHasEnablingLayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructuralLayerHasEnablingLayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructuralLayerHasEnablingLayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructuralLayerHasEnablingLayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region StructuralLayer domain role code
		
		/// <summary>
		/// StructuralLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid StructuralLayerDomainRoleId = new global::System.Guid(0x9c751f32, 0x8b25, 0x4d2c, 0x83, 0x72, 0xa2, 0xc8, 0x44, 0xe5, 0x89, 0x5f);
		
		/// <summary>
		/// DomainRole StructuralLayer
		/// Description for
		/// Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerHasEnablingLayer/StructuralLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.StructuralLayerHasEnablingLayer/StructuralLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EnablingLayer", PropertyDisplayNameKey="Company.Language1.StructuralLayerHasEnablingLayer/StructuralLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9c751f32-8b25-4d2c-8372-a2c844e5895f")]
		public virtual StructuralLayer StructuralLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StructuralLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, StructuralLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StructuralLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StructuralLayer of a EnablingLayer
		/// <summary>
		/// Gets StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static StructuralLayer GetStructuralLayer(EnablingLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnablingLayerDomainRoleId) as StructuralLayer;
		}
		
		/// <summary>
		/// Sets StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStructuralLayer(EnablingLayer element, StructuralLayer newStructuralLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnablingLayerDomainRoleId, newStructuralLayer);
		}
		#endregion
		#region EnablingLayer domain role code
		
		/// <summary>
		/// EnablingLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnablingLayerDomainRoleId = new global::System.Guid(0xd8081115, 0x6822, 0x4c78, 0x97, 0x7f, 0x0f, 0x13, 0xac, 0x55, 0x75, 0x5e);
		
		/// <summary>
		/// DomainRole EnablingLayer
		/// Description for Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.StructuralLayerHasEnablingLayer/EnablingLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.StructuralLayerHasEnablingLayer/EnablingLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "StructuralLayer", PropertyDisplayNameKey="Company.Language1.StructuralLayerHasEnablingLayer/EnablingLayer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d8081115-6822-4c78-977f-0f13ac55755e")]
		public virtual EnablingLayer EnablingLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnablingLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnablingLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnablingLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EnablingLayer of a StructuralLayer
		/// <summary>
		/// Gets EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EnablingLayer GetEnablingLayer(StructuralLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StructuralLayerDomainRoleId) as EnablingLayer;
		}
		
		/// <summary>
		/// Sets EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnablingLayer(StructuralLayer element, EnablingLayer newEnablingLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StructuralLayerDomainRoleId, newEnablingLayer);
		}
		#endregion
		#region StructuralLayer link accessor
		/// <summary>
		/// Get the StructuralLayerHasEnablingLayer link to a StructuralLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.StructuralLayerHasEnablingLayer GetLinkToEnablingLayer (global::Company.Language1.StructuralLayer structuralLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerHasEnablingLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerHasEnablingLayer>(structuralLayerInstance, global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StructuralLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EnablingLayer link accessor
		/// <summary>
		/// Get the StructuralLayerHasEnablingLayer link to a EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.StructuralLayerHasEnablingLayer GetLinkToStructuralLayer (global::Company.Language1.EnablingLayer enablingLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerHasEnablingLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerHasEnablingLayer>(enablingLayerInstance, global::Company.Language1.StructuralLayerHasEnablingLayer.EnablingLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnablingLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StructuralLayerHasEnablingLayer instance accessors
		
		/// <summary>
		/// Get any StructuralLayerHasEnablingLayer links between a given StructuralLayer and a EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.StructuralLayerHasEnablingLayer> GetLinks( global::Company.Language1.StructuralLayer source, global::Company.Language1.EnablingLayer target )
		{
			global::System.Collections.Generic.List<global::Company.Language1.StructuralLayerHasEnablingLayer> outLinks = new global::System.Collections.Generic.List<global::Company.Language1.StructuralLayerHasEnablingLayer>();
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerHasEnablingLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerHasEnablingLayer>(source, global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId);
			foreach ( global::Company.Language1.StructuralLayerHasEnablingLayer link in links )
			{
				if ( target.Equals(link.EnablingLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StructuralLayerHasEnablingLayer link between a given StructuralLayerand a EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.StructuralLayerHasEnablingLayer GetLink( global::Company.Language1.StructuralLayer source, global::Company.Language1.EnablingLayer target )
		{
			global::System.Collections.Generic.IList<global::Company.Language1.StructuralLayerHasEnablingLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.StructuralLayerHasEnablingLayer>(source, global::Company.Language1.StructuralLayerHasEnablingLayer.StructuralLayerDomainRoleId);
			foreach ( global::Company.Language1.StructuralLayerHasEnablingLayer link in links )
			{
				if ( target.Equals(link.EnablingLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainRelationship EnablingLayerHasLyfeCycleLayer
	/// Description for Company.Language1.EnablingLayerHasLyfeCycleLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.EnablingLayerHasLyfeCycleLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.EnablingLayerHasLyfeCycleLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("182f3a85-7a58-4c60-9efc-edb095686927")]
	public partial class EnablingLayerHasLyfeCycleLayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EnablingLayerHasLyfeCycleLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x182f3a85, 0x7a58, 0x4c60, 0x9e, 0xfc, 0xed, 0xb0, 0x95, 0x68, 0x69, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EnablingLayerHasLyfeCycleLayer link in the same Partition as the given EnablingLayer
		/// </summary>
		/// <param name="source">EnablingLayer to use as the source of the relationship.</param>
		/// <param name="target">LyfeCycleLayer to use as the target of the relationship.</param>
		public EnablingLayerHasLyfeCycleLayer(EnablingLayer source, LyfeCycleLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId, source), new DslModeling::RoleAssignment(EnablingLayerHasLyfeCycleLayer.LyfeCycleLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnablingLayerHasLyfeCycleLayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnablingLayerHasLyfeCycleLayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnablingLayerHasLyfeCycleLayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnablingLayerHasLyfeCycleLayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EnablingLayer domain role code
		
		/// <summary>
		/// EnablingLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnablingLayerDomainRoleId = new global::System.Guid(0x5c00d6e6, 0x3edd, 0x42ed, 0x9f, 0x60, 0x2d, 0xad, 0x7b, 0xf2, 0xcc, 0x81);
		
		/// <summary>
		/// DomainRole EnablingLayer
		/// Description for Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.EnablingLayerHasLyfeCycleLayer/EnablingLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.EnablingLayerHasLyfeCycleLayer/EnablingLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LyfeCycleLayer", PropertyDisplayNameKey="Company.Language1.EnablingLayerHasLyfeCycleLayer/EnablingLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c00d6e6-3edd-42ed-9f60-2dad7bf2cc81")]
		public virtual EnablingLayer EnablingLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnablingLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnablingLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnablingLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EnablingLayer of a LyfeCycleLayer
		/// <summary>
		/// Gets EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EnablingLayer GetEnablingLayer(LyfeCycleLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LyfeCycleLayerDomainRoleId) as EnablingLayer;
		}
		
		/// <summary>
		/// Sets EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnablingLayer(LyfeCycleLayer element, EnablingLayer newEnablingLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LyfeCycleLayerDomainRoleId, newEnablingLayer);
		}
		#endregion
		#region LyfeCycleLayer domain role code
		
		/// <summary>
		/// LyfeCycleLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LyfeCycleLayerDomainRoleId = new global::System.Guid(0x042edea9, 0xf446, 0x4401, 0x9d, 0x93, 0x1c, 0x44, 0x38, 0xed, 0xfb, 0x06);
		
		/// <summary>
		/// DomainRole LyfeCycleLayer
		/// Description for Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.EnablingLayerHasLyfeCycleLayer/LyfeCycleLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.EnablingLayerHasLyfeCycleLayer/LyfeCycleLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EnablingLayer", PropertyDisplayNameKey="Company.Language1.EnablingLayerHasLyfeCycleLayer/LyfeCycleLayer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("042edea9-f446-4401-9d93-1c4438edfb06")]
		public virtual LyfeCycleLayer LyfeCycleLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LyfeCycleLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LyfeCycleLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LyfeCycleLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LyfeCycleLayer of a EnablingLayer
		/// <summary>
		/// Gets LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LyfeCycleLayer GetLyfeCycleLayer(EnablingLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnablingLayerDomainRoleId) as LyfeCycleLayer;
		}
		
		/// <summary>
		/// Sets LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLyfeCycleLayer(EnablingLayer element, LyfeCycleLayer newLyfeCycleLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnablingLayerDomainRoleId, newLyfeCycleLayer);
		}
		#endregion
		#region EnablingLayer link accessor
		/// <summary>
		/// Get the EnablingLayerHasLyfeCycleLayer link to a EnablingLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.EnablingLayerHasLyfeCycleLayer GetLinkToLyfeCycleLayer (global::Company.Language1.EnablingLayer enablingLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.EnablingLayerHasLyfeCycleLayer>(enablingLayerInstance, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnablingLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LyfeCycleLayer link accessor
		/// <summary>
		/// Get the EnablingLayerHasLyfeCycleLayer link to a LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.EnablingLayerHasLyfeCycleLayer GetLinkToEnablingLayer (global::Company.Language1.LyfeCycleLayer lyfeCycleLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.EnablingLayerHasLyfeCycleLayer>(lyfeCycleLayerInstance, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.LyfeCycleLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LyfeCycleLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EnablingLayerHasLyfeCycleLayer instance accessors
		
		/// <summary>
		/// Get any EnablingLayerHasLyfeCycleLayer links between a given EnablingLayer and a LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> GetLinks( global::Company.Language1.EnablingLayer source, global::Company.Language1.LyfeCycleLayer target )
		{
			global::System.Collections.Generic.List<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> outLinks = new global::System.Collections.Generic.List<global::Company.Language1.EnablingLayerHasLyfeCycleLayer>();
			global::System.Collections.Generic.IList<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.EnablingLayerHasLyfeCycleLayer>(source, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId);
			foreach ( global::Company.Language1.EnablingLayerHasLyfeCycleLayer link in links )
			{
				if ( target.Equals(link.LyfeCycleLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EnablingLayerHasLyfeCycleLayer link between a given EnablingLayerand a LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.EnablingLayerHasLyfeCycleLayer GetLink( global::Company.Language1.EnablingLayer source, global::Company.Language1.LyfeCycleLayer target )
		{
			global::System.Collections.Generic.IList<global::Company.Language1.EnablingLayerHasLyfeCycleLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.EnablingLayerHasLyfeCycleLayer>(source, global::Company.Language1.EnablingLayerHasLyfeCycleLayer.EnablingLayerDomainRoleId);
			foreach ( global::Company.Language1.EnablingLayerHasLyfeCycleLayer link in links )
			{
				if ( target.Equals(link.LyfeCycleLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language1
{
	/// <summary>
	/// DomainRelationship LyfeCycleLayerHasSystemLayer
	/// Description for Company.Language1.LyfeCycleLayerHasSystemLayer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language1.LyfeCycleLayerHasSystemLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language1.LyfeCycleLayerHasSystemLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language1.Language1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("808845c5-d3be-4ebe-bbc5-7b7a8b9f9899")]
	public partial class LyfeCycleLayerHasSystemLayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LyfeCycleLayerHasSystemLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x808845c5, 0xd3be, 0x4ebe, 0xbb, 0xc5, 0x7b, 0x7a, 0x8b, 0x9f, 0x98, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LyfeCycleLayerHasSystemLayer link in the same Partition as the given LyfeCycleLayer
		/// </summary>
		/// <param name="source">LyfeCycleLayer to use as the source of the relationship.</param>
		/// <param name="target">SystemLayer to use as the target of the relationship.</param>
		public LyfeCycleLayerHasSystemLayer(LyfeCycleLayer source, SystemLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId, source), new DslModeling::RoleAssignment(LyfeCycleLayerHasSystemLayer.SystemLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LyfeCycleLayerHasSystemLayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LyfeCycleLayerHasSystemLayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LyfeCycleLayerHasSystemLayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LyfeCycleLayerHasSystemLayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LyfeCycleLayer domain role code
		
		/// <summary>
		/// LyfeCycleLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LyfeCycleLayerDomainRoleId = new global::System.Guid(0x8bb60fdb, 0x0ed1, 0x49c9, 0x97, 0x41, 0x6d, 0xaf, 0xd6, 0x31, 0xc9, 0xde);
		
		/// <summary>
		/// DomainRole LyfeCycleLayer
		/// Description for Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.LyfeCycleLayerHasSystemLayer/LyfeCycleLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.LyfeCycleLayerHasSystemLayer/LyfeCycleLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SystemLayer", PropertyDisplayNameKey="Company.Language1.LyfeCycleLayerHasSystemLayer/LyfeCycleLayer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8bb60fdb-0ed1-49c9-9741-6dafd631c9de")]
		public virtual LyfeCycleLayer LyfeCycleLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LyfeCycleLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LyfeCycleLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LyfeCycleLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LyfeCycleLayer of a SystemLayer
		/// <summary>
		/// Gets LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LyfeCycleLayer GetLyfeCycleLayer(SystemLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SystemLayerDomainRoleId) as LyfeCycleLayer;
		}
		
		/// <summary>
		/// Sets LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLyfeCycleLayer(SystemLayer element, LyfeCycleLayer newLyfeCycleLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SystemLayerDomainRoleId, newLyfeCycleLayer);
		}
		#endregion
		#region SystemLayer domain role code
		
		/// <summary>
		/// SystemLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid SystemLayerDomainRoleId = new global::System.Guid(0x4f837152, 0x9ec6, 0x4cdf, 0xb3, 0x78, 0x04, 0x71, 0x83, 0xfa, 0xdf, 0xab);
		
		/// <summary>
		/// DomainRole SystemLayer
		/// Description for Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language1.LyfeCycleLayerHasSystemLayer/SystemLayer.DisplayName", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language1.LyfeCycleLayerHasSystemLayer/SystemLayer.Description", typeof(global::Company.Language1.Language1DomainModel), "Company.Language1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LyfeCycleLayer", PropertyDisplayNameKey="Company.Language1.LyfeCycleLayerHasSystemLayer/SystemLayer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4f837152-9ec6-4cdf-b378-047183fadfab")]
		public virtual SystemLayer SystemLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SystemLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, SystemLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SystemLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SystemLayer of a LyfeCycleLayer
		/// <summary>
		/// Gets SystemLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SystemLayer GetSystemLayer(LyfeCycleLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LyfeCycleLayerDomainRoleId) as SystemLayer;
		}
		
		/// <summary>
		/// Sets SystemLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSystemLayer(LyfeCycleLayer element, SystemLayer newSystemLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LyfeCycleLayerDomainRoleId, newSystemLayer);
		}
		#endregion
		#region LyfeCycleLayer link accessor
		/// <summary>
		/// Get the LyfeCycleLayerHasSystemLayer link to a LyfeCycleLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.LyfeCycleLayerHasSystemLayer GetLinkToSystemLayer (global::Company.Language1.LyfeCycleLayer lyfeCycleLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.LyfeCycleLayerHasSystemLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.LyfeCycleLayerHasSystemLayer>(lyfeCycleLayerInstance, global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LyfeCycleLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SystemLayer link accessor
		/// <summary>
		/// Get the LyfeCycleLayerHasSystemLayer link to a SystemLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.LyfeCycleLayerHasSystemLayer GetLinkToLyfeCycleLayer (global::Company.Language1.SystemLayer systemLayerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language1.LyfeCycleLayerHasSystemLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.LyfeCycleLayerHasSystemLayer>(systemLayerInstance, global::Company.Language1.LyfeCycleLayerHasSystemLayer.SystemLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SystemLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LyfeCycleLayerHasSystemLayer instance accessors
		
		/// <summary>
		/// Get any LyfeCycleLayerHasSystemLayer links between a given LyfeCycleLayer and a SystemLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language1.LyfeCycleLayerHasSystemLayer> GetLinks( global::Company.Language1.LyfeCycleLayer source, global::Company.Language1.SystemLayer target )
		{
			global::System.Collections.Generic.List<global::Company.Language1.LyfeCycleLayerHasSystemLayer> outLinks = new global::System.Collections.Generic.List<global::Company.Language1.LyfeCycleLayerHasSystemLayer>();
			global::System.Collections.Generic.IList<global::Company.Language1.LyfeCycleLayerHasSystemLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.LyfeCycleLayerHasSystemLayer>(source, global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId);
			foreach ( global::Company.Language1.LyfeCycleLayerHasSystemLayer link in links )
			{
				if ( target.Equals(link.SystemLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LyfeCycleLayerHasSystemLayer link between a given LyfeCycleLayerand a SystemLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language1.LyfeCycleLayerHasSystemLayer GetLink( global::Company.Language1.LyfeCycleLayer source, global::Company.Language1.SystemLayer target )
		{
			global::System.Collections.Generic.IList<global::Company.Language1.LyfeCycleLayerHasSystemLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language1.LyfeCycleLayerHasSystemLayer>(source, global::Company.Language1.LyfeCycleLayerHasSystemLayer.LyfeCycleLayerDomainRoleId);
			foreach ( global::Company.Language1.LyfeCycleLayerHasSystemLayer link in links )
			{
				if ( target.Equals(link.SystemLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
