//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship SoSaHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.SoSaHasElements.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.SoSaHasElements.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("eaa09709-46e1-4d58-932c-378fdaee9249")]
	public partial class SoSaHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSaHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeaa09709, 0x46e1, 0x4d58, 0x93, 0x2c, 0x37, 0x8f, 0xda, 0xee, 0x92, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSaHasElements link in the same Partition as the given SoSa
		/// </summary>
		/// <param name="source">SoSa to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevels to use as the target of the relationship.</param>
		public SoSaHasElements(SoSa source, ImpactLevels target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSaHasElements.SoSaDomainRoleId, source), new DslModeling::RoleAssignment(SoSaHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSa domain role code
		
		/// <summary>
		/// SoSa domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSaDomainRoleId = new global::System.Guid(0x1f350242, 0xf869, 0x4d70, 0x91, 0x16, 0xa7, 0xad, 0xd2, 0x14, 0x57, 0xcd);
		
		/// <summary>
		/// DomainRole SoSa
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.SoSaHasElements/SoSa.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.SoSaHasElements/SoSa.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.RICT_parentlevel.SoSaHasElements/SoSa.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f350242-f869-4d70-9116-a7add21457cd")]
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSa)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSa of a ImpactLevels
		/// <summary>
		/// Gets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSa GetSoSa(ImpactLevels element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SoSa;
		}
		
		/// <summary>
		/// Sets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSa(ImpactLevels element, SoSa newSoSa)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSoSa);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x37e402a4, 0x93b7, 0x4072, 0xa2, 0x28, 0xf8, 0xca, 0xa9, 0xfc, 0x6e, 0xa4);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.SoSaHasElements/Element.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.SoSaHasElements/Element.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSa", PropertyDisplayNameKey="Company.RICT_parentlevel.SoSaHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("37e402a4-93b7-4072-a228-f8caa9fc6ea4")]
		public virtual ImpactLevels Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SoSa
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetElements(SoSa element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, SoSaDomainRoleId);
		}
		#endregion
		#region SoSa link accessor
		/// <summary>
		/// Get the list of SoSaHasElements links to a SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.SoSaHasElements> GetLinksToElements ( global::Company.RICT_parentlevel.SoSa soSaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.SoSaHasElements>(soSaInstance, global::Company.RICT_parentlevel.SoSaHasElements.SoSaDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SoSaHasElements link to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.SoSaHasElements GetLinkToSoSa (global::Company.RICT_parentlevel.ImpactLevels elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.SoSaHasElements>(elementInstance, global::Company.RICT_parentlevel.SoSaHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSaHasElements instance accessors
		
		/// <summary>
		/// Get any SoSaHasElements links between a given SoSa and a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.SoSaHasElements> GetLinks( global::Company.RICT_parentlevel.SoSa source, global::Company.RICT_parentlevel.ImpactLevels target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.SoSaHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.SoSaHasElements>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.SoSaHasElements>(source, global::Company.RICT_parentlevel.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSaHasElements link between a given SoSaand a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.SoSaHasElements GetLink( global::Company.RICT_parentlevel.SoSa source, global::Company.RICT_parentlevel.ImpactLevels target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.SoSaHasElements>(source, global::Company.RICT_parentlevel.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship ImpactLevelsReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("aa6d8866-4fe4-4dc0-bf27-7332935b38f3")]
	public partial class ImpactLevelsReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa6d8866, 0x4fe4, 0x4dc0, 0xbf, 0x27, 0x73, 0x32, 0x93, 0x5b, 0x38, 0xf3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsReferencesTargets link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevels to use as the target of the relationship.</param>
		public ImpactLevelsReferencesTargets(ImpactLevels source, ImpactLevels target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xffd3b803, 0x6fa7, 0x4bcc, 0xa0, 0x4b, 0x36, 0xfa, 0x81, 0xd0, 0xc2, 0xfa);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.RICT_parentlevel.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Source.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Source.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ffd3b803-6fa7-4bcc-a04b-36fa81d0c2fa")]
		public virtual ImpactLevels Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ImpactLevels
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetSources(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x30255bc8, 0x6e3c, 0x456b, 0xaf, 0x5c, 0x6a, 0xb7, 0xad, 0xd1, 0xdf, 0x52);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.RICT_parentlevel.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Target.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Target.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("30255bc8-6e3c-456b-af5c-6ab7add1df52")]
		public virtual ImpactLevels Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a ImpactLevels
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetTargets(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ImpactLevelsReferencesTargets links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> GetLinksToTargets ( global::Company.RICT_parentlevel.ImpactLevels sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets>(sourceInstance, global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ImpactLevelsReferencesTargets links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> GetLinksToSources ( global::Company.RICT_parentlevel.ImpactLevels targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets>(targetInstance, global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region ImpactLevelsReferencesTargets instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsReferencesTargets links between a given ImpactLevels and a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> GetLinks( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.ImpactLevels target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets>(source, global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsReferencesTargets link between a given ImpactLevelsand a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets GetLink( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.ImpactLevels target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets>(source, global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship ImpactLevelsHasConcerns
	/// Description for Company.RICT_parentlevel.ImpactLevelsHasConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8555e636-d889-472e-83cd-243b47d964c4")]
	public partial class ImpactLevelsHasConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsHasConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8555e636, 0xd889, 0x472e, 0x83, 0xcd, 0x24, 0x3b, 0x47, 0xd9, 0x64, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsHasConcerns link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">Concerns to use as the target of the relationship.</param>
		public ImpactLevelsHasConcerns(ImpactLevels source, Concerns target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsHasConcerns.ConcernsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevels domain role code
		
		/// <summary>
		/// ImpactLevels domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelsDomainRoleId = new global::System.Guid(0x1c3055ca, 0xb687, 0x4e3d, 0xa9, 0x9b, 0xab, 0x34, 0xec, 0x9b, 0x3f, 0xbd);
		
		/// <summary>
		/// DomainRole ImpactLevels
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevels
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns/ImpactLevels.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns/ImpactLevels.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerns", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsHasConcerns/ImpactLevels.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1c3055ca-b687-4e3d-a99b-ab34ec9b3fbd")]
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevels of a Concerns
		/// <summary>
		/// Gets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevels GetImpactLevels(Concerns element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernsDomainRoleId) as ImpactLevels;
		}
		
		/// <summary>
		/// Sets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevels(Concerns element, ImpactLevels newImpactLevels)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernsDomainRoleId, newImpactLevels);
		}
		#endregion
		#region Concerns domain role code
		
		/// <summary>
		/// Concerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernsDomainRoleId = new global::System.Guid(0x1bbc3183, 0x5eae, 0x4507, 0xae, 0x9d, 0xc5, 0xdd, 0x61, 0xea, 0x9c, 0x5a);
		
		/// <summary>
		/// DomainRole Concerns
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasConcerns.Concerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns/Concerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasConcerns/Concerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevels", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsHasConcerns/Concerns.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1bbc3183-5eae-4507-ae9d-c5dd61ea9c5a")]
		public virtual Concerns Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerns of a ImpactLevels
		/// <summary>
		/// Gets a list of Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetConcerns(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, ImpactLevelsDomainRoleId);
		}
		#endregion
		#region ImpactLevels link accessor
		/// <summary>
		/// Get the list of ImpactLevelsHasConcerns links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> GetLinksToConcerns ( global::Company.RICT_parentlevel.ImpactLevels impactLevelsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns>(impactLevelsInstance, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
		}
		#endregion
		#region Concerns link accessor
		/// <summary>
		/// Get the ImpactLevelsHasConcerns link to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.ImpactLevelsHasConcerns GetLinkToImpactLevels (global::Company.RICT_parentlevel.Concerns concernsInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns>(concernsInstance, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ConcernsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concerns not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelsHasConcerns instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsHasConcerns links between a given ImpactLevels and a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> GetLinks( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns>(source, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsHasConcerns link in links )
			{
				if ( target.Equals(link.Concerns) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsHasConcerns link between a given ImpactLevelsand a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.ImpactLevelsHasConcerns GetLink( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasConcerns>(source, global::Company.RICT_parentlevel.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsHasConcerns link in links )
			{
				if ( target.Equals(link.Concerns) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship PositiveRelation
	/// Description for Company.RICT_parentlevel.PositiveRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("73fa8697-8c49-4273-ab0d-2bf87ccf0e90")]
	public partial class PositiveRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PositiveRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73fa8697, 0x8c49, 0x4273, 0xab, 0x0d, 0x2b, 0xf8, 0x7c, 0xcf, 0x0e, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PositiveRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Concerns to use as the target of the relationship.</param>
		public PositiveRelation(Concerns source, Concerns target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PositiveRelation.SourceConcernsDomainRoleId, source), new DslModeling::RoleAssignment(PositiveRelation.TargetConcernsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcerns domain role code
		
		/// <summary>
		/// SourceConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernsDomainRoleId = new global::System.Guid(0x7a4022a7, 0x6f1b, 0x43bc, 0xa2, 0x7a, 0x47, 0x37, 0xb9, 0xf7, 0x2d, 0xfc);
		
		/// <summary>
		/// DomainRole SourceConcerns
		/// Description for Company.RICT_parentlevel.PositiveRelation.SourceConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveRelation/SourceConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveRelation/SourceConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PositiveTargetConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.PositiveRelation/SourceConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7a4022a7-6f1b-43bc-a27a-4737b9f72dfc")]
		public virtual Concerns SourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveSourceConcerns of a Concerns
		/// <summary>
		/// Gets a list of PositiveSourceConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetPositiveSourceConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, TargetConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns domain role code
		
		/// <summary>
		/// TargetConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernsDomainRoleId = new global::System.Guid(0x9eb5f245, 0x50b9, 0x4631, 0x89, 0x3e, 0x1a, 0x7a, 0x5f, 0xea, 0x6f, 0x60);
		
		/// <summary>
		/// DomainRole TargetConcerns
		/// Description for Company.RICT_parentlevel.PositiveRelation.TargetConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveRelation/TargetConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveRelation/TargetConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PositiveSourceConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.PositiveRelation/TargetConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9eb5f245-50b9-4631-893e-1a7a5fea6f60")]
		public virtual Concerns TargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveTargetConcerns of a Concerns
		/// <summary>
		/// Gets a list of PositiveTargetConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetPositiveTargetConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SourceConcernsDomainRoleId);
		}
		#endregion
		#region SourceConcerns link accessor
		/// <summary>
		/// Get the list of PositiveRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveRelation> GetLinksToPositiveTargetConcerns ( global::Company.RICT_parentlevel.Concerns sourceConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveRelation>(sourceConcernsInstance, global::Company.RICT_parentlevel.PositiveRelation.SourceConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns link accessor
		/// <summary>
		/// Get the list of PositiveRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveRelation> GetLinksToPositiveSourceConcerns ( global::Company.RICT_parentlevel.Concerns targetConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveRelation>(targetConcernsInstance, global::Company.RICT_parentlevel.PositiveRelation.TargetConcernsDomainRoleId);
		}
		#endregion
		#region PositiveRelation instance accessors
		
		/// <summary>
		/// Get any PositiveRelation links between a given Concerns and a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.PositiveRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.PositiveRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.PositiveRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveRelation>(source, global::Company.RICT_parentlevel.PositiveRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.PositiveRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PositiveRelation link between a given Concernsand a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.PositiveRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.PositiveRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveRelation>(source, global::Company.RICT_parentlevel.PositiveRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.PositiveRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship NegativeRelation
	/// Description for Company.RICT_parentlevel.NegativeRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8c67b288-c653-433f-ab59-2dc54d87c1d0")]
	public partial class NegativeRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NegativeRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8c67b288, 0xc653, 0x433f, 0xab, 0x59, 0x2d, 0xc5, 0x4d, 0x87, 0xc1, 0xd0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NegativeRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Concerns to use as the target of the relationship.</param>
		public NegativeRelation(Concerns source, Concerns target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NegativeRelation.SourceConcernsDomainRoleId, source), new DslModeling::RoleAssignment(NegativeRelation.TargetConcernsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcerns domain role code
		
		/// <summary>
		/// SourceConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernsDomainRoleId = new global::System.Guid(0x6941525b, 0x5e04, 0x4e29, 0x80, 0x18, 0x55, 0x7e, 0x68, 0x71, 0xc9, 0x62);
		
		/// <summary>
		/// DomainRole SourceConcerns
		/// Description for Company.RICT_parentlevel.NegativeRelation.SourceConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeRelation/SourceConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeRelation/SourceConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NegativeTargetConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.NegativeRelation/SourceConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6941525b-5e04-4e29-8018-557e6871c962")]
		public virtual Concerns SourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeSourceConcerns of a Concerns
		/// <summary>
		/// Gets a list of NegativeSourceConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetNegativeSourceConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, TargetConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns domain role code
		
		/// <summary>
		/// TargetConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernsDomainRoleId = new global::System.Guid(0x6c7c1671, 0x0712, 0x4eca, 0xab, 0x84, 0x8c, 0x24, 0x04, 0x7f, 0x6e, 0x1c);
		
		/// <summary>
		/// DomainRole TargetConcerns
		/// Description for Company.RICT_parentlevel.NegativeRelation.TargetConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeRelation/TargetConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeRelation/TargetConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NegativeSourceConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.NegativeRelation/TargetConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6c7c1671-0712-4eca-ab84-8c24047f6e1c")]
		public virtual Concerns TargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeTargetConcerns of a Concerns
		/// <summary>
		/// Gets a list of NegativeTargetConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetNegativeTargetConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SourceConcernsDomainRoleId);
		}
		#endregion
		#region SourceConcerns link accessor
		/// <summary>
		/// Get the list of NegativeRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeRelation> GetLinksToNegativeTargetConcerns ( global::Company.RICT_parentlevel.Concerns sourceConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeRelation>(sourceConcernsInstance, global::Company.RICT_parentlevel.NegativeRelation.SourceConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns link accessor
		/// <summary>
		/// Get the list of NegativeRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeRelation> GetLinksToNegativeSourceConcerns ( global::Company.RICT_parentlevel.Concerns targetConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeRelation>(targetConcernsInstance, global::Company.RICT_parentlevel.NegativeRelation.TargetConcernsDomainRoleId);
		}
		#endregion
		#region NegativeRelation instance accessors
		
		/// <summary>
		/// Get any NegativeRelation links between a given Concerns and a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.NegativeRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.NegativeRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.NegativeRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeRelation>(source, global::Company.RICT_parentlevel.NegativeRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.NegativeRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NegativeRelation link between a given Concernsand a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.NegativeRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.NegativeRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeRelation>(source, global::Company.RICT_parentlevel.NegativeRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.NegativeRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship ImpactLevelsHasSolution
	/// Description for Company.RICT_parentlevel.ImpactLevelsHasSolution
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasSolution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasSolution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e4ecdfe8-d4c9-4b8a-922d-c61af59cef59")]
	public partial class ImpactLevelsHasSolution : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsHasSolution domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4ecdfe8, 0xd4c9, 0x4b8a, 0x92, 0x2d, 0xc6, 0x1a, 0xf5, 0x9c, 0xef, 0x59);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsHasSolution link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">Solution to use as the target of the relationship.</param>
		public ImpactLevelsHasSolution(ImpactLevels source, Solution target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsHasSolution.ImpactLevelsDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsHasSolution.SolutionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasSolution(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasSolution(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasSolution(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasSolution(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevels domain role code
		
		/// <summary>
		/// ImpactLevels domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelsDomainRoleId = new global::System.Guid(0x49ffa666, 0x2bcc, 0x455e, 0xba, 0x73, 0xf4, 0xe2, 0xea, 0x03, 0x91, 0xc0);
		
		/// <summary>
		/// DomainRole ImpactLevels
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevels
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasSolution/ImpactLevels.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasSolution/ImpactLevels.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Solution", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsHasSolution/ImpactLevels.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("49ffa666-2bcc-455e-ba73-f4e2ea0391c0")]
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevels of a Solution
		/// <summary>
		/// Gets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevels GetImpactLevels(Solution element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SolutionDomainRoleId) as ImpactLevels;
		}
		
		/// <summary>
		/// Sets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevels(Solution element, ImpactLevels newImpactLevels)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SolutionDomainRoleId, newImpactLevels);
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0xf29bea19, 0xb8db, 0x4dda, 0xac, 0x1c, 0x78, 0xb5, 0xb3, 0xe7, 0xe1, 0xa3);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.RICT_parentlevel.ImpactLevelsHasSolution.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.ImpactLevelsHasSolution/Solution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.ImpactLevelsHasSolution/Solution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevels", PropertyDisplayNameKey="Company.RICT_parentlevel.ImpactLevelsHasSolution/Solution.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f29bea19-b8db-4dda-ac1c-78b5b3e7e1a3")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution of a ImpactLevels
		/// <summary>
		/// Gets a list of Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution> GetSolution(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(element, ImpactLevelsDomainRoleId);
		}
		#endregion
		#region ImpactLevels link accessor
		/// <summary>
		/// Get the list of ImpactLevelsHasSolution links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> GetLinksToSolution ( global::Company.RICT_parentlevel.ImpactLevels impactLevelsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasSolution>(impactLevelsInstance, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevelsDomainRoleId);
		}
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the ImpactLevelsHasSolution link to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.ImpactLevelsHasSolution GetLinkToImpactLevels (global::Company.RICT_parentlevel.Solution solutionInstance)
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasSolution>(solutionInstance, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.SolutionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Solution not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelsHasSolution instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsHasSolution links between a given ImpactLevels and a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> GetLinks( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.ImpactLevelsHasSolution>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasSolution>(source, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevelsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsHasSolution link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsHasSolution link between a given ImpactLevelsand a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.ImpactLevelsHasSolution GetLink( global::Company.RICT_parentlevel.ImpactLevels source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.ImpactLevelsHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.ImpactLevelsHasSolution>(source, global::Company.RICT_parentlevel.ImpactLevelsHasSolution.ImpactLevelsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.ImpactLevelsHasSolution link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship UndecidedRelation
	/// Description for Company.RICT_parentlevel.UndecidedRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5f772253-86b9-4512-a7ee-1016f959391d")]
	public partial class UndecidedRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UndecidedRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f772253, 0x86b9, 0x4512, 0xa7, 0xee, 0x10, 0x16, 0xf9, 0x59, 0x39, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UndecidedRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Concerns to use as the target of the relationship.</param>
		public UndecidedRelation(Concerns source, Concerns target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UndecidedRelation.SourceConcernsDomainRoleId, source), new DslModeling::RoleAssignment(UndecidedRelation.TargetConcernsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcerns domain role code
		
		/// <summary>
		/// SourceConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernsDomainRoleId = new global::System.Guid(0x018cab30, 0xadf2, 0x4402, 0x96, 0xb6, 0x61, 0x34, 0x3a, 0x8a, 0x28, 0xd0);
		
		/// <summary>
		/// DomainRole SourceConcerns
		/// Description for Company.RICT_parentlevel.UndecidedRelation.SourceConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedRelation/SourceConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedRelation/SourceConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.UndecidedRelation/SourceConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("018cab30-adf2-4402-96b6-61343a8a28d0")]
		public virtual Concerns SourceConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerns of a Concerns
		/// <summary>
		/// Gets a list of SourceConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetSourceConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, TargetConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns domain role code
		
		/// <summary>
		/// TargetConcerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernsDomainRoleId = new global::System.Guid(0x89fbeeb9, 0x9d78, 0x4a53, 0x92, 0x1b, 0x47, 0x10, 0x20, 0x39, 0x2b, 0xbc);
		
		/// <summary>
		/// DomainRole TargetConcerns
		/// Description for Company.RICT_parentlevel.UndecidedRelation.TargetConcerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedRelation/TargetConcerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedRelation/TargetConcerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.UndecidedRelation/TargetConcerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("89fbeeb9-9d78-4a53-921b-471020392bbc")]
		public virtual Concerns TargetConcerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerns of a Concerns
		/// <summary>
		/// Gets a list of TargetConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetTargetConcerns(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SourceConcernsDomainRoleId);
		}
		#endregion
		#region SourceConcerns link accessor
		/// <summary>
		/// Get the list of UndecidedRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedRelation> GetLinksToTargetConcerns ( global::Company.RICT_parentlevel.Concerns sourceConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedRelation>(sourceConcernsInstance, global::Company.RICT_parentlevel.UndecidedRelation.SourceConcernsDomainRoleId);
		}
		#endregion
		#region TargetConcerns link accessor
		/// <summary>
		/// Get the list of UndecidedRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedRelation> GetLinksToSourceConcerns ( global::Company.RICT_parentlevel.Concerns targetConcernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedRelation>(targetConcernsInstance, global::Company.RICT_parentlevel.UndecidedRelation.TargetConcernsDomainRoleId);
		}
		#endregion
		#region UndecidedRelation instance accessors
		
		/// <summary>
		/// Get any UndecidedRelation links between a given Concerns and a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.UndecidedRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.UndecidedRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.UndecidedRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedRelation>(source, global::Company.RICT_parentlevel.UndecidedRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.UndecidedRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UndecidedRelation link between a given Concernsand a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.UndecidedRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Concerns target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.UndecidedRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedRelation>(source, global::Company.RICT_parentlevel.UndecidedRelation.SourceConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.UndecidedRelation link in links )
			{
				if ( target.Equals(link.TargetConcerns) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship PositiveSolutionRelation
	/// Description for Company.RICT_parentlevel.PositiveSolutionRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveSolutionRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveSolutionRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e3fc3ef6-0f3e-439b-9fbb-4000e3788e8e")]
	public partial class PositiveSolutionRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PositiveSolutionRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3fc3ef6, 0x0f3e, 0x439b, 0x9f, 0xbb, 0x40, 0x00, 0xe3, 0x78, 0x8e, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PositiveSolutionRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Solution to use as the target of the relationship.</param>
		public PositiveSolutionRelation(Concerns source, Solution target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PositiveSolutionRelation.ConcernsDomainRoleId, source), new DslModeling::RoleAssignment(PositiveSolutionRelation.SolutionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveSolutionRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveSolutionRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PositiveSolutionRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PositiveSolutionRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Concerns domain role code
		
		/// <summary>
		/// Concerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernsDomainRoleId = new global::System.Guid(0x053c6e73, 0x4968, 0x4fb1, 0x90, 0x24, 0x06, 0x2d, 0xde, 0xae, 0x8c, 0x6e);
		
		/// <summary>
		/// DomainRole Concerns
		/// Description for Company.RICT_parentlevel.PositiveSolutionRelation.Concerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveSolutionRelation/Concerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveSolutionRelation/Concerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PositiveSolution", PropertyDisplayNameKey="Company.RICT_parentlevel.PositiveSolutionRelation/Concerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("053c6e73-4968-4fb1-9024-062ddeae8c6e")]
		public virtual Concerns Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveConcerns of a Solution
		/// <summary>
		/// Gets a list of PositiveConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetPositiveConcerns(Solution element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SolutionDomainRoleId);
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0x05de85b6, 0x9f69, 0x43ed, 0xa1, 0x26, 0xbd, 0x91, 0xe6, 0xdc, 0xcb, 0xa9);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.RICT_parentlevel.PositiveSolutionRelation.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.PositiveSolutionRelation/Solution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.PositiveSolutionRelation/Solution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PositiveConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.PositiveSolutionRelation/Solution.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05de85b6-9f69-43ed-a126-bd91e6dccba9")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveSolution of a Concerns
		/// <summary>
		/// Gets a list of PositiveSolution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution> GetPositiveSolution(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(element, ConcernsDomainRoleId);
		}
		#endregion
		#region Concerns link accessor
		/// <summary>
		/// Get the list of PositiveSolutionRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveSolutionRelation> GetLinksToPositiveSolution ( global::Company.RICT_parentlevel.Concerns concernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveSolutionRelation>(concernsInstance, global::Company.RICT_parentlevel.PositiveSolutionRelation.ConcernsDomainRoleId);
		}
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the list of PositiveSolutionRelation links to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveSolutionRelation> GetLinksToPositiveConcerns ( global::Company.RICT_parentlevel.Solution solutionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveSolutionRelation>(solutionInstance, global::Company.RICT_parentlevel.PositiveSolutionRelation.SolutionDomainRoleId);
		}
		#endregion
		#region PositiveSolutionRelation instance accessors
		
		/// <summary>
		/// Get any PositiveSolutionRelation links between a given Concerns and a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.PositiveSolutionRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.PositiveSolutionRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.PositiveSolutionRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.PositiveSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveSolutionRelation>(source, global::Company.RICT_parentlevel.PositiveSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.PositiveSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PositiveSolutionRelation link between a given Concernsand a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.PositiveSolutionRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.PositiveSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.PositiveSolutionRelation>(source, global::Company.RICT_parentlevel.PositiveSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.PositiveSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship NegativeSolutionRelation
	/// Description for Company.RICT_parentlevel.NegativeSolutionRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeSolutionRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeSolutionRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5ef98537-06b1-49ad-9e3b-939c78f505e9")]
	public partial class NegativeSolutionRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NegativeSolutionRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5ef98537, 0x06b1, 0x49ad, 0x9e, 0x3b, 0x93, 0x9c, 0x78, 0xf5, 0x05, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NegativeSolutionRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Solution to use as the target of the relationship.</param>
		public NegativeSolutionRelation(Concerns source, Solution target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NegativeSolutionRelation.ConcernsDomainRoleId, source), new DslModeling::RoleAssignment(NegativeSolutionRelation.SolutionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeSolutionRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeSolutionRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NegativeSolutionRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NegativeSolutionRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Concerns domain role code
		
		/// <summary>
		/// Concerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernsDomainRoleId = new global::System.Guid(0xd87920b6, 0xbb21, 0x449b, 0xb4, 0x40, 0x38, 0xb0, 0xf4, 0xe3, 0xe2, 0x8a);
		
		/// <summary>
		/// DomainRole Concerns
		/// Description for Company.RICT_parentlevel.NegativeSolutionRelation.Concerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeSolutionRelation/Concerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeSolutionRelation/Concerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NegativeSolution", PropertyDisplayNameKey="Company.RICT_parentlevel.NegativeSolutionRelation/Concerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d87920b6-bb21-449b-b440-38b0f4e3e28a")]
		public virtual Concerns Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeConcerns of a Solution
		/// <summary>
		/// Gets a list of NegativeConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetNegativeConcerns(Solution element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SolutionDomainRoleId);
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0xd8eddeb6, 0x5993, 0x4e0d, 0xaf, 0xac, 0xe7, 0xf5, 0xcd, 0xbb, 0xbf, 0x40);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.RICT_parentlevel.NegativeSolutionRelation.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.NegativeSolutionRelation/Solution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.NegativeSolutionRelation/Solution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NegativeConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.NegativeSolutionRelation/Solution.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d8eddeb6-5993-4e0d-afac-e7f5cdbbbf40")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeSolution of a Concerns
		/// <summary>
		/// Gets a list of NegativeSolution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution> GetNegativeSolution(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(element, ConcernsDomainRoleId);
		}
		#endregion
		#region Concerns link accessor
		/// <summary>
		/// Get the list of NegativeSolutionRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeSolutionRelation> GetLinksToNegativeSolution ( global::Company.RICT_parentlevel.Concerns concernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeSolutionRelation>(concernsInstance, global::Company.RICT_parentlevel.NegativeSolutionRelation.ConcernsDomainRoleId);
		}
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the list of NegativeSolutionRelation links to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeSolutionRelation> GetLinksToNegativeConcerns ( global::Company.RICT_parentlevel.Solution solutionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeSolutionRelation>(solutionInstance, global::Company.RICT_parentlevel.NegativeSolutionRelation.SolutionDomainRoleId);
		}
		#endregion
		#region NegativeSolutionRelation instance accessors
		
		/// <summary>
		/// Get any NegativeSolutionRelation links between a given Concerns and a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.NegativeSolutionRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.NegativeSolutionRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.NegativeSolutionRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.NegativeSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeSolutionRelation>(source, global::Company.RICT_parentlevel.NegativeSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.NegativeSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NegativeSolutionRelation link between a given Concernsand a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.NegativeSolutionRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.NegativeSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.NegativeSolutionRelation>(source, global::Company.RICT_parentlevel.NegativeSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.NegativeSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.RICT_parentlevel
{
	/// <summary>
	/// DomainRelationship UndecidedSolutionRelation
	/// Description for Company.RICT_parentlevel.UndecidedSolutionRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedSolutionRelation.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedSolutionRelation.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("daeed4bd-dfad-4706-a512-0c614991f4bb")]
	public partial class UndecidedSolutionRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UndecidedSolutionRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdaeed4bd, 0xdfad, 0x4706, 0xa5, 0x12, 0x0c, 0x61, 0x49, 0x91, 0xf4, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UndecidedSolutionRelation link in the same Partition as the given Concerns
		/// </summary>
		/// <param name="source">Concerns to use as the source of the relationship.</param>
		/// <param name="target">Solution to use as the target of the relationship.</param>
		public UndecidedSolutionRelation(Concerns source, Solution target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UndecidedSolutionRelation.ConcernsDomainRoleId, source), new DslModeling::RoleAssignment(UndecidedSolutionRelation.SolutionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedSolutionRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedSolutionRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndecidedSolutionRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndecidedSolutionRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Concerns domain role code
		
		/// <summary>
		/// Concerns domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernsDomainRoleId = new global::System.Guid(0x0dd63958, 0x0150, 0x4be2, 0xba, 0x3b, 0x63, 0x3c, 0xee, 0x1a, 0xec, 0xd7);
		
		/// <summary>
		/// DomainRole Concerns
		/// Description for Company.RICT_parentlevel.UndecidedSolutionRelation.Concerns
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedSolutionRelation/Concerns.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedSolutionRelation/Concerns.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UndecidedSolution", PropertyDisplayNameKey="Company.RICT_parentlevel.UndecidedSolutionRelation/Concerns.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0dd63958-0150-4be2-ba3b-633cee1aecd7")]
		public virtual Concerns Concerns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concerns)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UndecidedConcerns of a Solution
		/// <summary>
		/// Gets a list of UndecidedConcerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concerns> GetUndecidedConcerns(Solution element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concerns>, Concerns>(element, SolutionDomainRoleId);
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0x3ff7f821, 0x3d67, 0x4d25, 0xa1, 0x7c, 0x0a, 0xb3, 0x9b, 0x36, 0x29, 0x96);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.RICT_parentlevel.UndecidedSolutionRelation.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.RICT_parentlevel.UndecidedSolutionRelation/Solution.DisplayName", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.RICT_parentlevel.UndecidedSolutionRelation/Solution.Description", typeof(global::Company.RICT_parentlevel.RICT_parentlevelDomainModel), "Company.RICT_parentlevel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UndecidedConcerns", PropertyDisplayNameKey="Company.RICT_parentlevel.UndecidedSolutionRelation/Solution.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3ff7f821-3d67-4d25-a17c-0ab39b362996")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UndecidedSolution of a Concerns
		/// <summary>
		/// Gets a list of UndecidedSolution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution> GetUndecidedSolution(Concerns element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution>, Solution>(element, ConcernsDomainRoleId);
		}
		#endregion
		#region Concerns link accessor
		/// <summary>
		/// Get the list of UndecidedSolutionRelation links to a Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedSolutionRelation> GetLinksToUndecidedSolution ( global::Company.RICT_parentlevel.Concerns concernsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedSolutionRelation>(concernsInstance, global::Company.RICT_parentlevel.UndecidedSolutionRelation.ConcernsDomainRoleId);
		}
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the list of UndecidedSolutionRelation links to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedSolutionRelation> GetLinksToUndecidedConcerns ( global::Company.RICT_parentlevel.Solution solutionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedSolutionRelation>(solutionInstance, global::Company.RICT_parentlevel.UndecidedSolutionRelation.SolutionDomainRoleId);
		}
		#endregion
		#region UndecidedSolutionRelation instance accessors
		
		/// <summary>
		/// Get any UndecidedSolutionRelation links between a given Concerns and a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.RICT_parentlevel.UndecidedSolutionRelation> GetLinks( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.List<global::Company.RICT_parentlevel.UndecidedSolutionRelation> outLinks = new global::System.Collections.Generic.List<global::Company.RICT_parentlevel.UndecidedSolutionRelation>();
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.UndecidedSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedSolutionRelation>(source, global::Company.RICT_parentlevel.UndecidedSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.UndecidedSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UndecidedSolutionRelation link between a given Concernsand a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.RICT_parentlevel.UndecidedSolutionRelation GetLink( global::Company.RICT_parentlevel.Concerns source, global::Company.RICT_parentlevel.Solution target )
		{
			global::System.Collections.Generic.IList<global::Company.RICT_parentlevel.UndecidedSolutionRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.RICT_parentlevel.UndecidedSolutionRelation>(source, global::Company.RICT_parentlevel.UndecidedSolutionRelation.ConcernsDomainRoleId);
			foreach ( global::Company.RICT_parentlevel.UndecidedSolutionRelation link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
